# Markdown

### Copy of ../UltiSnips/markdown.snippets

global !p
# A overkill(dirty) table with automatic alignment feature
def create_table(snip):
	# retrieving single line from current string and treat it like tabstops count
	placeholders_string = snip.buffer[snip.line].strip()
	rows_amount = int(placeholders_string[0])
	columns_amount = int(placeholders_string[1])

	prefix_str = "from vimsnippets import display_width;"

	# erase current line
	snip.buffer[snip.line] = ""

	# create anonymous snippet with expected content and number of tabstops
	anon_snippet_title = "| "
	anon_snippet_delimiter = "|"
	for col in range(1, columns_amount+1):
		sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
		sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
		max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
		cur_width_str = "display_width(t[" + str(col) + "])"
		rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
		anon_snippet_title += "${" + str(col)  + ":head" + str(col)\
			+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "
		anon_snippet_delimiter += ":`!p " + prefix_str + "snip.rv = "\
			+ max_width_str + "*'-'" + "`-|"

	anon_snippet_title += "\n"

	anon_snippet_delimiter += "\n"
	anon_snippet_body = ""
	for row in range(1, rows_amount+1):
		body_row = "| "
		for col in range(1, columns_amount+1):
			sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
			sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
			max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
			cur_width_str = "display_width(t[" + str(row*columns_amount+col) + "])"
			rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
			placeholder = "R{0}C{1}".format(row, col)
			body_row += "${" + str(row*columns_amount+col)  + ":" + placeholder\
				+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "

		body_row += "\n"
		anon_snippet_body += body_row

	anon_snippet_table = anon_snippet_title + anon_snippet_delimiter + anon_snippet_body

	# expand anonymous snippet
	snip.expand_anon(anon_snippet_table)
endglobal

###########################
# Sections and Paragraphs #
###########################
snippet sec "Section" b
# ${1:Section Name} #
$0
endsnippet

snippet ssec "Sub Section" b
## ${1:Section Name} ##
$0
endsnippet

snippet sssec "SubSub Section" b
### ${1:Section Name} ###
$0
endsnippet

snippet par "Paragraph" b
#### ${1:Paragraph Name} ####
$0
endsnippet

snippet spar "Paragraph" b
##### ${1:Paragraph Name} #####
$0
endsnippet

###################
# Text formatting #
###################

snippet * "italics"
*${1:${VISUAL}}*$0
endsnippet

snippet ** "bold"
**${1:${VISUAL}}**$0
endsnippet

snippet *** "bold italics"
***${1:${VISUAL}}***$0
endsnippet


################
# Common stuff #
################
snippet link "Link to something"
[${1:${VISUAL:Text}}](${3:http://${2:www.url.com}})$0
endsnippet

snippet img "Image"
![${1:pic alt}](${2:path}${3/.+/ "/}${3:opt title}${3/.+/"/})$0
endsnippet

snippet ilc "Inline Code" i
\`$1\`$0
endsnippet

snippet cbl "Codeblock" b
\`\`\`
$1
\`\`\`
$0
endsnippet

snippet refl "Reference Link"
[${1:${VISUAL:Text}}][${2:id}]$0

[$2]:${4:http://${3:www.url.com}} "${5:$4}"
endsnippet

snippet fnt "Footnote"
[^${1:${VISUAL:Footnote}}]$0

[^$1]:${2:Text}
endsnippet

post_jump "create_table(snip)"
snippet "tb([1-9][1-9])" "Fancy table" br
`!p snip.rv = match.group(1)`
endsnippet

### End of ../UltiSnips/markdown.snippets


# Includes octopress (http://octopress.org/) snippets

# The suffix `c` stands for "Clipboard".

snippet [
	[${1:text}](http://${2:address})
snippet [*
	[${1:link}](${2:`@*`})
snippet [c
	[${1:link}](${2:`@+`})
snippet ["
	[${1:text}](http://${2:address} "${3:title}")
snippet ["*
	[${1:link}](${2:`@*`} "${3:title}")
snippet ["c
	[${1:link}](${2:`@+`} "${3:title}")
snippet [:
	[${1:id}]: http://${2:url}

snippet [:*
	[${1:id}]: ${2:`@*`}

snippet [:c
	[${1:id}]: ${2:`@+`}

snippet [:"
	[${1:id}]: http://${2:url} "${3:title}"

snippet [:"*
	[${1:id}]: ${2:`@*`} "${3:title}"

snippet [:"c
	[${1:id}]: ${2:`@+`} "${3:title}"

snippet ![
	![${1:alttext}](${2:/images/image.jpg})
snippet ![*
	![${1:alt}](${2:`@*`})
snippet ![c
	![${1:alt}](${2:`@+`})
snippet !["
	![${1:alttext}](${2:/images/image.jpg} "${3:title}")
snippet !["*
	![${1:alt}](${2:`@*`} "${3:title}")
snippet !["c
	![${1:alt}](${2:`@+`} "${3:title}")
snippet ![:
	![${1:id}]: ${2:url}

snippet ![:*
	![${1:id}]: ${2:`@*`}

snippet ![:"
	![${1:id}]: ${2:url} "${3:title}"

snippet ![:"*
	![${1:id}]: ${2:`@*`} "${3:title}"

snippet ![:"c
	![${1:id}]: ${2:`@+`} "${3:title}"

snippet <
	<http://${1:url}>
snippet <*
	<`@*`>
snippet <c
	<`@+`>
snippet **
	**${1:bold}**
snippet __
	__${1:bold}__
snippet ===
	`repeat('=', strlen(getline(line('.') - 3)))`

	${0}
snippet -
	-   ${0}
snippet ---
	`repeat('-', strlen(getline(line('.') - 3)))`

	${0}
snippet blockquote
	{% blockquote %}
	${0:quote}
	{% endblockquote %}

snippet blockquote-author
	{% blockquote ${1:author}, ${2:title} %}
	${0:quote}
	{% endblockquote %}

snippet blockquote-link
	{% blockquote ${1:author} ${2:URL} ${3:link_text} %}
	${0:quote}
	{% endblockquote %}

snippet ```
	\`\`\`${1}
	${0:${VISUAL}}
	\`\`\`

# Language.
snippet ```l
	\`\`\`${1:language}
	${2:code}
	\`\`\`

snippet codeblock-short
	{% codeblock %}
	${0:code_snippet}
	{% endcodeblock %}

snippet codeblock-full
	{% codeblock ${1:title} lang:${2:language} ${3:URL} ${4:link_text} %}
	${0:code_snippet}
	{% endcodeblock %}

snippet gist-full
	{% gist ${1:gist_id} ${0:filename} %}

snippet gist-short
	{% gist ${0:gist_id} %}

snippet img
	{% img ${1:class} ${2:URL} ${3:width} ${4:height} ${5:title_text} ${0:alt_text} %}

snippet youtube
	{% youtube ${0:video_id} %}

# The quote should appear only once in the text. It is inherently part of it.
# See http://octopress.org/docs/plugins/pullquote/ for more info.

snippet pullquote
	{% pullquote %}
	${1:text} {" ${2:quote} "} ${0:text}
	{% endpullquote %}
